version: '3.8'

services:
  app1: &app_template
    deploy:
      mode: replicated
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 5s
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "autoscaling=true"

  app2:
    <<: *app_template

  app3:
    <<: *app_template

  websocket1: &websocket_template
    deploy:
      mode: replicated
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 5s
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "autoscaling=true"

  websocket2:
    <<: *websocket_template

  websocket3:
    <<: *websocket_template

  autoscaler:
    image: dockersamples/visualizer
    environment:
      - AUTOSCALER_INTERVAL=30s
      - MIN_REPLICAS=1
      - MAX_REPLICAS=10
      - CPU_PERCENT_TARGET=70
      - MEMORY_PERCENT_TARGET=80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=false"
    depends_on:
      - app1
      - app2
      - app3
      - websocket1
      - websocket2
      - websocket3

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    deploy:
      placement:
        constraints:
          - node.role == manager

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    deploy:
      placement:
        constraints:
          - node.role == manager

volumes:
  prometheus_data:
  grafana_data: 