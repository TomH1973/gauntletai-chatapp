generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
  GUEST
}

enum ThreadRole {
  OWNER
  ADMIN
  MEMBER
}

enum MessageStatus {
  SENDING
  SENT
  DELIVERED
  READ
  ERROR
  FAILED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  firstName     String?
  lastName      String?
  clerkId       String?   @unique
  profileImage  String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(false)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  messages          Message[]
  messageEdits      MessageEdit[]
  reactions         MessageReaction[]
  threadParticipant ThreadParticipant[]
}

model Thread {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messages     Message[]
  participants ThreadParticipant[]
}

model ThreadParticipant {
  userId     String
  threadId   String
  role       ThreadRole @default(MEMBER)
  joinedAt   DateTime  @default(now())
  lastReadAt DateTime?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@id([userId, threadId])
}

model Message {
  id        String        @id @default(cuid())
  content   String
  threadId  String
  userId    String
  parentId  String?
  status    MessageStatus @default(SENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  thread    Thread           @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Message?        @relation("MessageReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies   Message[]       @relation("MessageReplies")
  edits     MessageEdit[]
  reactions MessageReaction[]
}

model MessageEdit {
  id        String   @id @default(cuid())
  messageId String
  content   String
  editedBy  String
  createdAt DateTime @default(now())

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [editedBy], references: [id], onDelete: Cascade)
}

model MessageReaction {
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([messageId, userId, emoji])
} 