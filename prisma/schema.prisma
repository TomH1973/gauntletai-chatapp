generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MessageStatus {
  SENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum ParticipantRole {
  OWNER
  ADMIN
  MEMBER
}

enum FileType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

model User {
  id             String           @id @default(cuid())
  clerkId        String           @unique
  email          String           @unique
  name           String?
  image          String?
  role           String          @default("USER")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  lastLoginAt    DateTime?
  isActive       Boolean          @default(true)
  messages       Message[]
  threads        ThreadParticipant[]
  readMessages   MessageRead[]
  messageEdits   MessageEdit[]
  notifications  Notification[]
  sessions       Session[]
  preferences    UserPreferences?
  attachments    Attachment[]
  reactions      Reaction[]

  @@index([email])
  @@index([clerkId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model Thread {
  id           String             @id @default(cuid())
  name         String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  messages     Message[]
  participants ThreadParticipant[]

  @@index([updatedAt])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  threadId  String
  parentId  String?
  status    MessageStatus @default(SENT)
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  thread    Thread   @relation(fields: [threadId], references: [id])
  parent    Message? @relation("Replies", fields: [parentId], references: [id])
  replies   Message[] @relation("Replies")
  reactions Reaction[]
  readBy    MessageRead[]

  @@index([threadId, createdAt])
  @@index([parentId])
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  userId    String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([messageId])
}

model ThreadParticipant {
  id        String         @id @default(cuid())
  userId    String
  threadId  String
  role      ParticipantRole @default(MEMBER)
  joinedAt  DateTime       @default(now())
  leftAt    DateTime?
  user      User           @relation(fields: [userId], references: [id])
  thread    Thread         @relation(fields: [threadId], references: [id])

  @@unique([userId, threadId])
  @@index([threadId])
  @@index([userId])
}

model MessageEdit {
  id        String   @id @default(cuid())
  content   String
  messageId String
  editedBy  String
  editedAt  DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  editor    User     @relation(fields: [editedBy], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([editedBy])
}

model UserPreferences {
  id                   String    @id @default(cuid())
  userId               String    @unique
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme                String    @default("system")
  shareProfile         Boolean   @default(true)
  showOnlineStatus     Boolean   @default(true)
  allowMessagePreviews Boolean   @default(true)
  retainMessageHistory Boolean   @default(true)
  notificationSound    Boolean   @default(true)
  desktopNotifications Boolean   @default(true)
  emailNotifications   Boolean   @default(true)
  language            String    @default("en")
  timezone            String    @default("UTC")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([userId])
}

model Attachment {
  id          String    @id @default(cuid())
  filename    String
  fileType    FileType
  mimeType    String
  size        Int
  url         String
  key         String    @unique
  messageId   String
  message     Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  uploaderId  String
  uploader    User      @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isPublic    Boolean   @default(false)
  isDeleted   Boolean   @default(false)

  @@index([messageId])
  @@index([uploaderId])
  @@index([fileType])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String   // Unicode emoji or custom emoji identifier
  messageId String
  userId    String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])  // One unique emoji reaction per user per message
  @@index([messageId])
  @@index([userId])
}

model FileScanResult {
  id        String   @id @default(cuid())
  hash      String   @unique
  isClean   Boolean
  threat    String?
  scannedAt DateTime @default(now())

  @@index([hash])
} 