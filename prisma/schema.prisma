datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum MessageStatus {
  SENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum FileType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  ARCHIVE
  OTHER
}

model User {
  id        String    @id @default(cuid())
  clerkId   String    @unique
  email     String    @unique
  name      String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  messages     Message[]
  messageEdits MessageEdit[]
  threads      ThreadParticipant[]
  attachments  Attachment[]

  @@index([email])
  @@index([createdAt])
}

model Thread {
  id            String    @id @default(cuid())
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastMessageAt DateTime?

  // Relations
  messages     Message[]
  participants ThreadParticipant[]

  @@index([createdAt])
  @@index([lastMessageAt])
}

model ThreadParticipant {
  userId    String
  threadId  String
  role      String    @default("MEMBER")
  joinedAt  DateTime  @default(now())
  leftAt    DateTime?

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  thread  Thread  @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@id([userId, threadId])
  @@index([userId])
  @@index([threadId])
  @@index([role])
}

model Message {
  id        String       @id @default(cuid())
  content   String
  userId    String
  threadId  String
  parentId  String?     // Parent message ID for replies
  status    MessageStatus @default(SENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  user      User         @relation(fields: [userId], references: [id])
  thread    Thread       @relation(fields: [threadId], references: [id], onDelete: Cascade)
  parent    Message?     @relation("MessageReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies   Message[]    @relation("MessageReplies")
  edits     MessageEdit[]
  reactions Reaction[]
  attachments Attachment[]

  @@index([userId])
  @@index([threadId])
  @@index([parentId])
  @@index([status])
  @@index([createdAt])
  @@index([threadId, createdAt])
  @@index([userId, createdAt])
  @@index([content])
}

model MessageEdit {
  id        String   @id @default(cuid())
  messageId String
  editedBy  String
  content   String
  createdAt DateTime @default(now())

  // Relations
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  editor    User     @relation(fields: [editedBy], references: [id])

  @@index([messageId])
  @@index([editedBy])
  @@index([createdAt])
}

model Reaction {
  id        String   @id @default(cuid())
  messageId String
  emoji     String
  users     String[]
  count     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, emoji])
  @@index([messageId])
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  key       String   @unique
  url       String
  size      Int
  mimeType  String
  fileType  FileType
  isPublic  Boolean  @default(false)
  isDeleted Boolean  @default(false)
  
  uploaderId String
  uploader   User     @relation(fields: [uploaderId], references: [id])
  messageId  String?
  message    Message? @relation(fields: [messageId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([uploaderId])
  @@index([messageId])
  @@index([fileType])
} 