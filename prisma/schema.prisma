generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core enums
enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  DO_NOT_DISTURB
}

enum ParticipantRole {
  OWNER
  ADMIN
  MEMBER
}

enum MessageStatus {
  SENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum MessageType {
  TEXT
  SYSTEM
  FILE
}

// Core user model with Clerk integration
model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique // External Clerk ID
  email         String    @unique
  name          String    // Required for display
  image         String    // Required for avatar
  status        UserStatus @default(OFFLINE)
  lastActiveAt  DateTime?
  lastSeenAt    DateTime?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  presence      UserPresence[]
  participants  ThreadParticipant[]
  messages      Message[]
  readReceipts  MessageRead[]
  sessions      Session[]

  // Indexes for quick lookups
  @@index([clerkId])
  @@index([email])
  @@index([status])
}

// Real-time presence tracking
model UserPresence {
  id            String    @id @default(cuid())
  userId        String
  deviceId      String    // For multi-device support
  status        UserStatus
  lastActiveAt  DateTime
  metadata      Json?     // Device info, client version, etc.
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, deviceId])
  @@index([userId])
  @@index([status])
}

// Session management
model Session {
  id            String    @id @default(cuid())
  userId        String
  deviceId      String
  token         String    @unique
  lastActiveAt  DateTime
  expiresAt     DateTime
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([token])
}

// Thread/conversation model
model Thread {
  id            String    @id @default(cuid())
  name          String    // Required for group chats
  isGroup       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastMessageAt DateTime?
  
  // Relations
  participants  ThreadParticipant[]
  messages      Message[]
  activities    ThreadActivity[]

  // Indexes
  @@index([lastMessageAt])
  @@index([updatedAt])
}

// Enhanced participant model with granular permissions
model ThreadParticipant {
  id            String    @id @default(cuid())
  threadId      String
  userId        String
  role          ParticipantRole @default(MEMBER)
  
  // Permissions
  canInvite     Boolean   @default(false)
  canRemove     Boolean   @default(false)
  canEditThread Boolean   @default(false)
  
  // Timestamps
  joinedAt      DateTime  @default(now())
  leftAt        DateTime?
  
  // Relations
  thread        Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities    ThreadActivity[]

  // Constraints
  @@unique([userId, threadId])
  @@index([threadId])
  @@index([userId])
  @@index([role])
}

// Real-time thread activity tracking
model ThreadActivity {
  id            String    @id @default(cuid())
  threadId      String
  userId        String
  participantId String
  isTyping      Boolean   @default(false)
  lastActiveAt  DateTime
  
  // Relations
  thread        Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade)
  participant   ThreadParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([threadId])
  @@index([userId])
  @@index([lastActiveAt])
}

// Enhanced message model
model Message {
  id            String    @id @default(cuid())
  threadId      String
  userId        String
  type          MessageType @default(TEXT)
  content       String
  metadata      Json?     // For rich messages, files, etc.
  status        MessageStatus @default(SENDING)
  
  // Reply support
  parentId      String?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  editedAt      DateTime?
  deletedAt     DateTime?
  
  // Relations
  thread        Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent        Message?  @relation("Replies", fields: [parentId], references: [id])
  replies       Message[] @relation("Replies")
  readReceipts  MessageRead[]

  // Indexes
  @@index([threadId, createdAt])
  @@index([userId])
  @@index([parentId])
  @@index([status])
}

// Enhanced read receipts
model MessageRead {
  id            String    @id @default(cuid())
  messageId     String
  userId        String
  readAt        DateTime  @default(now())
  deliveredAt   DateTime  @default(now())
  
  // Relations
  message       Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
} 