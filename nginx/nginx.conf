user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    multi_accept on;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Performance Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    reset_timedout_connection on;
    client_body_timeout 10;
    send_timeout 2;
    
    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_conn_zone $binary_remote_addr zone=addr_limit:10m;
    
    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Cloudflare Real IP
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 131.0.72.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 2400:cb00::/32;
    set_real_ip_from 2606:4700::/32;
    set_real_ip_from 2803:f800::/32;
    set_real_ip_from 2405:b500::/32;
    set_real_ip_from 2405:8100::/32;
    set_real_ip_from 2c0f:f248::/32;
    set_real_ip_from 2a06:98c0::/29;
    real_ip_header CF-Connecting-IP;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header Referrer-Policy strict-origin-when-cross-origin;
    add_header Content-Security-Policy "default-src 'self'; connect-src 'self' wss://$host; img-src 'self' data: https://*.cloudfront.net; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval';" always;
    
    # Logging
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       '$request_time $upstream_response_time $pipe '
                       'cdn_cache:"$http_cf_cache_status"';
    
    access_log /var/log/nginx/access.log detailed buffer=512k flush=1m;
    
    # Upstream definitions with load balancing
    upstream app_servers {
        least_conn;
        server app1:3000 weight=5 max_fails=3 fail_timeout=30s;
        server app2:3000 weight=5 max_fails=3 fail_timeout=30s;
        server app3:3000 weight=5 max_fails=3 fail_timeout=30s backup;
        queue 100 timeout=70;
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;
        check interval=3000 rise=2 fall=5 timeout=1000 type=http;
        check_http_send "HEAD /health HTTP/1.0\r\n\r\n";
        check_http_expect_alive http_2xx http_3xx;
    }
    
    upstream websocket_servers {
        ip_hash;
        server websocket1:4000 weight=5 max_fails=3 fail_timeout=30s;
        server websocket2:4000 weight=5 max_fails=3 fail_timeout=30s;
        server websocket3:4000 weight=5 max_fails=3 fail_timeout=30s backup;
        queue 50 timeout=30;
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;
        check interval=3000 rise=2 fall=5 timeout=1000 type=http;
        check_http_send "HEAD /health HTTP/1.0\r\n\r\n";
        check_http_expect_alive http_2xx http_3xx;
    }
    
    # Cache settings for static files
    map $request_uri $cache_control {
        default                         "public, no-transform, max-age=86400";  # 24 hours
        ~*\.(js|css|svg)$              "public, no-transform, max-age=31536000";  # 1 year
        ~*\.(jpg|jpeg|png|gif|ico)$    "public, no-transform, max-age=31536000";  # 1 year
        ~*\.(woff|woff2|ttf|otf)$      "public, no-transform, max-age=31536000";  # 1 year
    }
    
    # Enhanced metrics collection
    log_format upstream_time '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';
    
    # Main server block
    server {
        listen 80;
        listen [::]:80;
        server_name chatapp.example.com;
        
        # Redirect all HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }
    
    # HTTPS server block
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name chatapp.example.com;
        
        # SSL certificate configuration
        ssl_certificate /etc/nginx/ssl/live/chatapp.example.com/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/live/chatapp.example.com/privkey.pem;
        ssl_trusted_certificate /etc/nginx/ssl/live/chatapp.example.com/chain.pem;
        
        # Rate limiting
        limit_req zone=api_limit burst=20 nodelay;
        limit_conn addr_limit 10;
        
        # Static files location with caching
        location /static/ {
            root /var/www;
            expires max;
            add_header Cache-Control $cache_control;
            add_header X-Cache-Status $upstream_cache_status;
            try_files $uri @app;
            access_log off;
        }
        
        # Media files location with caching
        location /media/ {
            root /var/www;
            expires max;
            add_header Cache-Control $cache_control;
            add_header X-Cache-Status $upstream_cache_status;
            try_files $uri @app;
            access_log off;
        }
        
        # App proxy with load balancing
        location @app {
            proxy_pass http://app_servers;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 8 8k;
        }
        
        # WebSocket proxy with load balancing
        location /socket.io/ {
            proxy_pass http://websocket_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 'healthy\n';
        }
        
        # Load balancer status for monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
    }
} 