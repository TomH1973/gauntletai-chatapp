version: '3.8'

services:
  nginx:
    container_name: chatapp-nginx
    image: nginx:1.25-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app1
      - app2
      - app3
      - websocket1
      - websocket2
      - websocket3
    networks:
      - chatapp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  app1: &app_template
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment: &app_env
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/chatapp
      - REDIS_URL=redis://redis:6379
      - APP_URL=https://chatapp.example.com
      - SOCKET_URL=wss://chatapp.example.com
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chatapp-network
    expose:
      - 3000
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  app2:
    <<: *app_template
    environment:
      <<: *app_env

  app3:
    <<: *app_template
    environment:
      <<: *app_env

  websocket1: &websocket_template
    build:
      context: .
      dockerfile: Dockerfile.websocket
    restart: unless-stopped
    environment: &websocket_env
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - chatapp-network
    expose:
      - 4000
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  websocket2:
    <<: *websocket_template
    environment:
      <<: *websocket_env

  websocket3:
    <<: *websocket_template
    environment:
      <<: *websocket_env

  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=chatapp
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chatapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - chatapp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  chatapp-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  nginx_logs: 